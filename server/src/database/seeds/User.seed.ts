// User.seed.ts
import {PrismaClient} from '@prisma/client';

class UserSeeder {
    private prisma: PrismaClient;

    constructor() {
        this.prisma = new PrismaClient();
    }

    private users = [
        {
            id: 1,
            roleId: 1,
            email: "user@user.com",
            password: "user@user.com",
            avatarId: null,
            createdAt: new Date()
        },
        {
            id: 2,
            roleId: 2,
            email: "realtor@realtor.com",
            password: "realtor@realtor.com",
            avatarId: null,
            createdAt: new Date()
        },
        {
            id: 3,
            roleId: 3,
            email: "admin@admin.com",
            password: "admin@admin.com",
            avatarId: null,
            createdAt: new Date()
        },
    ];

    public async run() {
        try {
            console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

            for (const user of this.users) {
                try {
                    await this.prisma.user.create({data: user});
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${user.email}" —Å–æ–∑–¥–∞–Ω`);
                } catch (error: any) {
                    if (error.code === 'P2002') { // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (email –∏–ª–∏ id)
                        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${user.email}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    } else {
                        throw error;
                    }
                }
            }

            console.log('‚úÖ –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        } finally {
            await this.prisma.$disconnect();
        }
    }
}

export const userSeeder = new UserSeeder();
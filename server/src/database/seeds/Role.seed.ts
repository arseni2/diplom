// Role.seed.ts
import {PrismaClient} from '@prisma/client';

class RoleSeeder {
    private prisma: PrismaClient;

    constructor() {
        this.prisma = new PrismaClient();
    }

    private roles = [
        {id: 1, title: 'User'},
        {id: 2, title: 'Realtor'},
        {id: 3, title: 'Admin'},
    ];

    public async run() {
        try {
            console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π...');

            for (const role of this.roles) {
                try {
                    await this.prisma.role.create({data: role});
                    console.log(`‚úÖ –†–æ–ª—å "${role.title}" —Å–æ–∑–¥–∞–Ω–∞`);
                } catch (error: any) {
                    if (error.code === 'P2002') { // Unique constraint failed
                        console.log(`‚ö†Ô∏è  –†–æ–ª—å "${role.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    } else {
                        throw error; // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                    }
                }
            }

            console.log('‚úÖ –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–µ–π:', error);
            throw error;
        } finally {
            await this.prisma.$disconnect();
        }
    }
}

export const roleSeeder = new RoleSeeder();
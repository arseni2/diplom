/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    mutation CreateAppeal($input: AppealsCreateInput!) {\n        createAppeal(createAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                title\n                address\n                price\n            }\n            client {\n                id\n                firstname\n                lastname\n                email\n            }\n            realtor {\n                id\n                firstname\n                lastname\n                email\n            }\n        }\n    }\n": typeof types.CreateAppealDocument,
    "\n    query GetAppeals {\n        appeals {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n": typeof types.GetAppealsDocument,
    "\n    mutation UpdateAppeal($id: Int!, $input: AppealsUpdateInput!) {\n        updateAppeal(id: $id , updateAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n": typeof types.UpdateAppealDocument,
    "\n    mutation SignIn($email: String!, $password: String!) {\n        signIn(createUserInput: { email: $email, password: $password }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n": typeof types.SignInDocument,
    "\n    mutation SignUp($email: String!, $password: String!, $firstname: String, $lastname: String, $middlename: String) {\n        signUp(createUserInput: { email: $email, password: $password, firstname: $firstname, lastname: $lastname, middlename: $middlename }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n": typeof types.SignUpDocument,
    "\n    mutation CreateFeatureMutation($title: String!, $value: String!, $houses: HouseCreateNestedManyWithoutFeaturesInput) {\n        createFeature(createFeatureInput: { \n            title: $title, \n            value: $value,\n            houses: $houses\n        }) {\n            id\n            title\n            value\n        }\n    }\n": typeof types.CreateFeatureMutationDocument,
    "\n    mutation EditFeatureMutation(\n        $id: Int!\n        $title: String!\n        $value: String!\n    ) {\n        updateFeature(\n            id: $id\n            updateFeatureInput: {\n                title: {set:$title}\n                value: {set:$value}\n            }\n        ) {\n            id\n            title\n            value\n        }\n    }\n": typeof types.EditFeatureMutationDocument,
    "\n    mutation DeleteFeatureMutation($id: Int!) {\n        removeFeature(id: $id) {\n            id\n            title\n            value\n        }\n    }\n": typeof types.DeleteFeatureMutationDocument,
    "\n    query GetFeatures {\n        features {\n            id\n            title\n            value\n        }\n    }\n": typeof types.GetFeaturesDocument,
    "\n    mutation uploadFiles($houseId: String, $files: [Upload!]!) {\n        uploadFiles(houseId: $houseId, files: $files) {\n            id\n            url\n        }\n    }\n": typeof types.UploadFilesDocument,
    "\n    query GetHousesRent {\n        housesRent {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": typeof types.GetHousesRentDocument,
    "\n    query GetHousesAll {\n        housesAll {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": typeof types.GetHousesAllDocument,
    "\n    query GetHouseDetail($id: Int!) {\n        house(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n                role {\n                    id\n                    title\n                }\n                avatar {\n                    id\n                    path\n                    name\n                    size\n                }\n                houses {\n                    id\n                    title\n                    address\n                }\n                appealsAsClient {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n                appealsAsRealtor {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n": typeof types.GetHouseDetailDocument,
    "\n    mutation createHouse($input: HouseCreateDto!) {\n        createHouse(\n            createHouseInput: $input\n        ) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n            appeal {\n                id\n                createdAt\n                status\n                comment\n                houseId\n                clientId\n                realtorId\n            }\n        }\n    }\n": typeof types.CreateHouseDocument,
    "\n    query getHousesByRealtorId($id: Int!) {\n        housesRealtor(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n": typeof types.GetHousesByRealtorIdDocument,
    "\n    query HousesFilter($address: String, $minPrice: Float, $maxPrice: Float, $isRent: Boolean) {\n        housesFilter(address: $address, minPrice: $minPrice, maxPrice: $maxPrice, isRent: $isRent) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n            }\n        }\n    }\n": typeof types.HousesFilterDocument,
    "\nmutation updateHouse($id: Float!, $input: HouseUpdateInput!) {\n    updateHouse(id: $id, updateHouseInput: $input) {\n        id\n        createdAt\n        title\n        description\n        address\n        square\n        remont\n        floor\n        rooms\n        bio\n        price\n        isRent\n        isSell\n        realtorId\n        images {\n            id\n            path\n            name\n            size\n            houseId\n        }\n        features {\n            id\n            title\n            value\n        }\n    }\n}\n": typeof types.UpdateHouseDocument,
    "\n    query Users {\n        users {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            roleId\n            houses {\n                id\n            }\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": typeof types.UsersDocument,
    "\n    mutation ChangeUserRole($id: Float!, $roleId: Int!) {\n        updateAnyUser(data: { role: {connect: {id: $roleId}} }, id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n        }\n    }\n": typeof types.ChangeUserRoleDocument,
    "\n    mutation RemoveUser($id: Float!) {\n        removeAnyUser(id: $id) {\n            id\n        }\n    }\n": typeof types.RemoveUserDocument,
    "\n    query UsersMe {\n        me {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": typeof types.UsersMeDocument,
    "\n    mutation UpdateUser($data: UserUpdateInput!) {\n        updateUser(data: $data) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": typeof types.UpdateUserDocument,
    "\n    query user($id: Int!) {\n        user(id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": typeof types.UserDocument,
};
const documents: Documents = {
    "\n    mutation CreateAppeal($input: AppealsCreateInput!) {\n        createAppeal(createAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                title\n                address\n                price\n            }\n            client {\n                id\n                firstname\n                lastname\n                email\n            }\n            realtor {\n                id\n                firstname\n                lastname\n                email\n            }\n        }\n    }\n": types.CreateAppealDocument,
    "\n    query GetAppeals {\n        appeals {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n": types.GetAppealsDocument,
    "\n    mutation UpdateAppeal($id: Int!, $input: AppealsUpdateInput!) {\n        updateAppeal(id: $id , updateAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n": types.UpdateAppealDocument,
    "\n    mutation SignIn($email: String!, $password: String!) {\n        signIn(createUserInput: { email: $email, password: $password }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n": types.SignInDocument,
    "\n    mutation SignUp($email: String!, $password: String!, $firstname: String, $lastname: String, $middlename: String) {\n        signUp(createUserInput: { email: $email, password: $password, firstname: $firstname, lastname: $lastname, middlename: $middlename }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n": types.SignUpDocument,
    "\n    mutation CreateFeatureMutation($title: String!, $value: String!, $houses: HouseCreateNestedManyWithoutFeaturesInput) {\n        createFeature(createFeatureInput: { \n            title: $title, \n            value: $value,\n            houses: $houses\n        }) {\n            id\n            title\n            value\n        }\n    }\n": types.CreateFeatureMutationDocument,
    "\n    mutation EditFeatureMutation(\n        $id: Int!\n        $title: String!\n        $value: String!\n    ) {\n        updateFeature(\n            id: $id\n            updateFeatureInput: {\n                title: {set:$title}\n                value: {set:$value}\n            }\n        ) {\n            id\n            title\n            value\n        }\n    }\n": types.EditFeatureMutationDocument,
    "\n    mutation DeleteFeatureMutation($id: Int!) {\n        removeFeature(id: $id) {\n            id\n            title\n            value\n        }\n    }\n": types.DeleteFeatureMutationDocument,
    "\n    query GetFeatures {\n        features {\n            id\n            title\n            value\n        }\n    }\n": types.GetFeaturesDocument,
    "\n    mutation uploadFiles($houseId: String, $files: [Upload!]!) {\n        uploadFiles(houseId: $houseId, files: $files) {\n            id\n            url\n        }\n    }\n": types.UploadFilesDocument,
    "\n    query GetHousesRent {\n        housesRent {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": types.GetHousesRentDocument,
    "\n    query GetHousesAll {\n        housesAll {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": types.GetHousesAllDocument,
    "\n    query GetHouseDetail($id: Int!) {\n        house(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n                role {\n                    id\n                    title\n                }\n                avatar {\n                    id\n                    path\n                    name\n                    size\n                }\n                houses {\n                    id\n                    title\n                    address\n                }\n                appealsAsClient {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n                appealsAsRealtor {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n": types.GetHouseDetailDocument,
    "\n    mutation createHouse($input: HouseCreateDto!) {\n        createHouse(\n            createHouseInput: $input\n        ) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n            appeal {\n                id\n                createdAt\n                status\n                comment\n                houseId\n                clientId\n                realtorId\n            }\n        }\n    }\n": types.CreateHouseDocument,
    "\n    query getHousesByRealtorId($id: Int!) {\n        housesRealtor(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n": types.GetHousesByRealtorIdDocument,
    "\n    query HousesFilter($address: String, $minPrice: Float, $maxPrice: Float, $isRent: Boolean) {\n        housesFilter(address: $address, minPrice: $minPrice, maxPrice: $maxPrice, isRent: $isRent) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n            }\n        }\n    }\n": types.HousesFilterDocument,
    "\nmutation updateHouse($id: Float!, $input: HouseUpdateInput!) {\n    updateHouse(id: $id, updateHouseInput: $input) {\n        id\n        createdAt\n        title\n        description\n        address\n        square\n        remont\n        floor\n        rooms\n        bio\n        price\n        isRent\n        isSell\n        realtorId\n        images {\n            id\n            path\n            name\n            size\n            houseId\n        }\n        features {\n            id\n            title\n            value\n        }\n    }\n}\n": types.UpdateHouseDocument,
    "\n    query Users {\n        users {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            roleId\n            houses {\n                id\n            }\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": types.UsersDocument,
    "\n    mutation ChangeUserRole($id: Float!, $roleId: Int!) {\n        updateAnyUser(data: { role: {connect: {id: $roleId}} }, id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n        }\n    }\n": types.ChangeUserRoleDocument,
    "\n    mutation RemoveUser($id: Float!) {\n        removeAnyUser(id: $id) {\n            id\n        }\n    }\n": types.RemoveUserDocument,
    "\n    query UsersMe {\n        me {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n": types.UsersMeDocument,
    "\n    mutation UpdateUser($data: UserUpdateInput!) {\n        updateUser(data: $data) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": types.UpdateUserDocument,
    "\n    query user($id: Int!) {\n        user(id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n": types.UserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateAppeal($input: AppealsCreateInput!) {\n        createAppeal(createAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                title\n                address\n                price\n            }\n            client {\n                id\n                firstname\n                lastname\n                email\n            }\n            realtor {\n                id\n                firstname\n                lastname\n                email\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateAppeal($input: AppealsCreateInput!) {\n        createAppeal(createAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                title\n                address\n                price\n            }\n            client {\n                id\n                firstname\n                lastname\n                email\n            }\n            realtor {\n                id\n                firstname\n                lastname\n                email\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAppeals {\n        appeals {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAppeals {\n        appeals {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateAppeal($id: Int!, $input: AppealsUpdateInput!) {\n        updateAppeal(id: $id , updateAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateAppeal($id: Int!, $input: AppealsUpdateInput!) {\n        updateAppeal(id: $id , updateAppealInput: $input) {\n            id\n            createdAt\n            status\n            comment\n            houseId\n            clientId\n            realtorId\n            house {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                floor\n                rooms\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            client {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation SignIn($email: String!, $password: String!) {\n        signIn(createUserInput: { email: $email, password: $password }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n"): (typeof documents)["\n    mutation SignIn($email: String!, $password: String!) {\n        signIn(createUserInput: { email: $email, password: $password }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation SignUp($email: String!, $password: String!, $firstname: String, $lastname: String, $middlename: String) {\n        signUp(createUserInput: { email: $email, password: $password, firstname: $firstname, lastname: $lastname, middlename: $middlename }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n"): (typeof documents)["\n    mutation SignUp($email: String!, $password: String!, $firstname: String, $lastname: String, $middlename: String) {\n        signUp(createUserInput: { email: $email, password: $password, firstname: $firstname, lastname: $lastname, middlename: $middlename }) {\n            id\n            createdAt\n            email\n            password\n            roleId\n            role {\n                id\n                title\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n            token\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateFeatureMutation($title: String!, $value: String!, $houses: HouseCreateNestedManyWithoutFeaturesInput) {\n        createFeature(createFeatureInput: { \n            title: $title, \n            value: $value,\n            houses: $houses\n        }) {\n            id\n            title\n            value\n        }\n    }\n"): (typeof documents)["\n    mutation CreateFeatureMutation($title: String!, $value: String!, $houses: HouseCreateNestedManyWithoutFeaturesInput) {\n        createFeature(createFeatureInput: { \n            title: $title, \n            value: $value,\n            houses: $houses\n        }) {\n            id\n            title\n            value\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation EditFeatureMutation(\n        $id: Int!\n        $title: String!\n        $value: String!\n    ) {\n        updateFeature(\n            id: $id\n            updateFeatureInput: {\n                title: {set:$title}\n                value: {set:$value}\n            }\n        ) {\n            id\n            title\n            value\n        }\n    }\n"): (typeof documents)["\n    mutation EditFeatureMutation(\n        $id: Int!\n        $title: String!\n        $value: String!\n    ) {\n        updateFeature(\n            id: $id\n            updateFeatureInput: {\n                title: {set:$title}\n                value: {set:$value}\n            }\n        ) {\n            id\n            title\n            value\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteFeatureMutation($id: Int!) {\n        removeFeature(id: $id) {\n            id\n            title\n            value\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteFeatureMutation($id: Int!) {\n        removeFeature(id: $id) {\n            id\n            title\n            value\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFeatures {\n        features {\n            id\n            title\n            value\n        }\n    }\n"): (typeof documents)["\n    query GetFeatures {\n        features {\n            id\n            title\n            value\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation uploadFiles($houseId: String, $files: [Upload!]!) {\n        uploadFiles(houseId: $houseId, files: $files) {\n            id\n            url\n        }\n    }\n"): (typeof documents)["\n    mutation uploadFiles($houseId: String, $files: [Upload!]!) {\n        uploadFiles(houseId: $houseId, files: $files) {\n            id\n            url\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetHousesRent {\n        housesRent {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetHousesRent {\n        housesRent {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetHousesAll {\n        housesAll {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetHousesAll {\n        housesAll {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            realtorId\n            floor\n            rooms\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetHouseDetail($id: Int!) {\n        house(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n                role {\n                    id\n                    title\n                }\n                avatar {\n                    id\n                    path\n                    name\n                    size\n                }\n                houses {\n                    id\n                    title\n                    address\n                }\n                appealsAsClient {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n                appealsAsRealtor {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetHouseDetail($id: Int!) {\n        house(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n                role {\n                    id\n                    title\n                }\n                avatar {\n                    id\n                    path\n                    name\n                    size\n                }\n                houses {\n                    id\n                    title\n                    address\n                }\n                appealsAsClient {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n                appealsAsRealtor {\n                    id\n                    createdAt\n                    status\n                    comment\n                    clientId\n                    realtorId\n                    houseId\n                }\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createHouse($input: HouseCreateDto!) {\n        createHouse(\n            createHouseInput: $input\n        ) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n            appeal {\n                id\n                createdAt\n                status\n                comment\n                houseId\n                clientId\n                realtorId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation createHouse($input: HouseCreateDto!) {\n        createHouse(\n            createHouseInput: $input\n        ) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            realtor {\n                id\n                createdAt\n                email\n                firstname\n                lastname\n                middlename\n                password\n                telephone\n                tg\n                roleId\n                avatarId\n            }\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n            appeal {\n                id\n                createdAt\n                status\n                comment\n                houseId\n                clientId\n                realtorId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getHousesByRealtorId($id: Int!) {\n        housesRealtor(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n"): (typeof documents)["\n    query getHousesByRealtorId($id: Int!) {\n        housesRealtor(id: $id) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            features {\n                id\n                title\n                value\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query HousesFilter($address: String, $minPrice: Float, $maxPrice: Float, $isRent: Boolean) {\n        housesFilter(address: $address, minPrice: $minPrice, maxPrice: $maxPrice, isRent: $isRent) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n            }\n        }\n    }\n"): (typeof documents)["\n    query HousesFilter($address: String, $minPrice: Float, $maxPrice: Float, $isRent: Boolean) {\n        housesFilter(address: $address, minPrice: $minPrice, maxPrice: $maxPrice, isRent: $isRent) {\n            id\n            createdAt\n            title\n            description\n            address\n            square\n            remont\n            floor\n            rooms\n            bio\n            price\n            isRent\n            isSell\n            realtorId\n            images {\n                id\n                path\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation updateHouse($id: Float!, $input: HouseUpdateInput!) {\n    updateHouse(id: $id, updateHouseInput: $input) {\n        id\n        createdAt\n        title\n        description\n        address\n        square\n        remont\n        floor\n        rooms\n        bio\n        price\n        isRent\n        isSell\n        realtorId\n        images {\n            id\n            path\n            name\n            size\n            houseId\n        }\n        features {\n            id\n            title\n            value\n        }\n    }\n}\n"): (typeof documents)["\nmutation updateHouse($id: Float!, $input: HouseUpdateInput!) {\n    updateHouse(id: $id, updateHouseInput: $input) {\n        id\n        createdAt\n        title\n        description\n        address\n        square\n        remont\n        floor\n        rooms\n        bio\n        price\n        isRent\n        isSell\n        realtorId\n        images {\n            id\n            path\n            name\n            size\n            houseId\n        }\n        features {\n            id\n            title\n            value\n        }\n    }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Users {\n        users {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            roleId\n            houses {\n                id\n            }\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"): (typeof documents)["\n    query Users {\n        users {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            roleId\n            houses {\n                id\n            }\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ChangeUserRole($id: Float!, $roleId: Int!) {\n        updateAnyUser(data: { role: {connect: {id: $roleId}} }, id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation ChangeUserRole($id: Float!, $roleId: Int!) {\n        updateAnyUser(data: { role: {connect: {id: $roleId}} }, id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n            houses {\n                id\n                createdAt\n                title\n                description\n                address\n                square\n                remont\n                bio\n                price\n                isRent\n                isSell\n                realtorId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveUser($id: Float!) {\n        removeAnyUser(id: $id) {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation RemoveUser($id: Float!) {\n        removeAnyUser(id: $id) {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UsersMe {\n        me {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"): (typeof documents)["\n    query UsersMe {\n        me {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            role {\n                id\n                title\n            }\n            avatar {\n                id\n                path\n                name\n                size\n                houseId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateUser($data: UserUpdateInput!) {\n        updateUser(data: $data) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUser($data: UserUpdateInput!) {\n        updateUser(data: $data) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query user($id: Int!) {\n        user(id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"): (typeof documents)["\n    query user($id: Int!) {\n        user(id: $id) {\n            id\n            createdAt\n            email\n            firstname\n            lastname\n            middlename\n            password\n            telephone\n            tg\n            roleId\n            avatarId\n            avatar {\n                id\n                path\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;